
Assignment_Lec.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000318  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000002ae  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 c9 00 	call	0x192	; 0x192 <main>
  64:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <wait>:
#define DDRA    		    *((volatile unsigned char*)0x3A)
#define PORTA	        	*((volatile unsigned char*)0x3B)


void wait(int x)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <wait+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <wait+0x8>
  74:	00 d0       	rcall	.+0      	; 0x76 <wait+0xa>
  76:	cd b7       	in	r28, 0x3d	; 61
  78:	de b7       	in	r29, 0x3e	; 62
  7a:	9e 83       	std	Y+6, r25	; 0x06
  7c:	8d 83       	std	Y+5, r24	; 0x05
	unsigned int i,j;
	for(i=0;i<x;i++)
  7e:	1c 82       	std	Y+4, r1	; 0x04
  80:	1b 82       	std	Y+3, r1	; 0x03
  82:	12 c0       	rjmp	.+36     	; 0xa8 <wait+0x3c>
	for(j=0;j<255;j++);
  84:	1a 82       	std	Y+2, r1	; 0x02
  86:	19 82       	std	Y+1, r1	; 0x01
  88:	05 c0       	rjmp	.+10     	; 0x94 <wait+0x28>
  8a:	89 81       	ldd	r24, Y+1	; 0x01
  8c:	9a 81       	ldd	r25, Y+2	; 0x02
  8e:	01 96       	adiw	r24, 0x01	; 1
  90:	9a 83       	std	Y+2, r25	; 0x02
  92:	89 83       	std	Y+1, r24	; 0x01
  94:	89 81       	ldd	r24, Y+1	; 0x01
  96:	9a 81       	ldd	r25, Y+2	; 0x02
  98:	8f 3f       	cpi	r24, 0xFF	; 255
  9a:	91 05       	cpc	r25, r1
  9c:	b0 f3       	brcs	.-20     	; 0x8a <wait+0x1e>


void wait(int x)
{
	unsigned int i,j;
	for(i=0;i<x;i++)
  9e:	8b 81       	ldd	r24, Y+3	; 0x03
  a0:	9c 81       	ldd	r25, Y+4	; 0x04
  a2:	01 96       	adiw	r24, 0x01	; 1
  a4:	9c 83       	std	Y+4, r25	; 0x04
  a6:	8b 83       	std	Y+3, r24	; 0x03
  a8:	2d 81       	ldd	r18, Y+5	; 0x05
  aa:	3e 81       	ldd	r19, Y+6	; 0x06
  ac:	8b 81       	ldd	r24, Y+3	; 0x03
  ae:	9c 81       	ldd	r25, Y+4	; 0x04
  b0:	82 17       	cp	r24, r18
  b2:	93 07       	cpc	r25, r19
  b4:	38 f3       	brcs	.-50     	; 0x84 <wait+0x18>
	for(j=0;j<255;j++);

}
  b6:	26 96       	adiw	r28, 0x06	; 6
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	f8 94       	cli
  bc:	de bf       	out	0x3e, r29	; 62
  be:	0f be       	out	0x3f, r0	; 63
  c0:	cd bf       	out	0x3d, r28	; 61
  c2:	cf 91       	pop	r28
  c4:	df 91       	pop	r29
  c6:	08 95       	ret

000000c8 <LED_ON>:
void LED_ON (int x)
{
  c8:	df 93       	push	r29
  ca:	cf 93       	push	r28
  cc:	00 d0       	rcall	.+0      	; 0xce <LED_ON+0x6>
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
  d2:	9a 83       	std	Y+2, r25	; 0x02
  d4:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(PORTA,x);
  d6:	ab e3       	ldi	r26, 0x3B	; 59
  d8:	b0 e0       	ldi	r27, 0x00	; 0
  da:	eb e3       	ldi	r30, 0x3B	; 59
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	28 2f       	mov	r18, r24
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	09 80       	ldd	r0, Y+1	; 0x01
  e8:	02 c0       	rjmp	.+4      	; 0xee <LED_ON+0x26>
  ea:	88 0f       	add	r24, r24
  ec:	99 1f       	adc	r25, r25
  ee:	0a 94       	dec	r0
  f0:	e2 f7       	brpl	.-8      	; 0xea <LED_ON+0x22>
  f2:	82 2b       	or	r24, r18
  f4:	8c 93       	st	X, r24
	wait(100);
  f6:	84 e6       	ldi	r24, 0x64	; 100
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 36 00 	call	0x6c	; 0x6c <wait>
}
  fe:	0f 90       	pop	r0
 100:	0f 90       	pop	r0
 102:	cf 91       	pop	r28
 104:	df 91       	pop	r29
 106:	08 95       	ret

00000108 <LED_OFF>:
void LED_OFF (int y)
{
 108:	df 93       	push	r29
 10a:	cf 93       	push	r28
 10c:	00 d0       	rcall	.+0      	; 0x10e <LED_OFF+0x6>
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
 112:	9a 83       	std	Y+2, r25	; 0x02
 114:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(PORTA,y);
 116:	ab e3       	ldi	r26, 0x3B	; 59
 118:	b0 e0       	ldi	r27, 0x00	; 0
 11a:	eb e3       	ldi	r30, 0x3B	; 59
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	28 2f       	mov	r18, r24
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	09 80       	ldd	r0, Y+1	; 0x01
 128:	02 c0       	rjmp	.+4      	; 0x12e <LED_OFF+0x26>
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	0a 94       	dec	r0
 130:	e2 f7       	brpl	.-8      	; 0x12a <LED_OFF+0x22>
 132:	80 95       	com	r24
 134:	82 23       	and	r24, r18
 136:	8c 93       	st	X, r24
		wait(100);
 138:	84 e6       	ldi	r24, 0x64	; 100
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 36 00 	call	0x6c	; 0x6c <wait>
}
 140:	0f 90       	pop	r0
 142:	0f 90       	pop	r0
 144:	cf 91       	pop	r28
 146:	df 91       	pop	r29
 148:	08 95       	ret

0000014a <Buzzer_ON>:
void Buzzer_ON()
{
 14a:	df 93       	push	r29
 14c:	cf 93       	push	r28
 14e:	cd b7       	in	r28, 0x3d	; 61
 150:	de b7       	in	r29, 0x3e	; 62
SET_BIT(PORTA,3);
 152:	ab e3       	ldi	r26, 0x3B	; 59
 154:	b0 e0       	ldi	r27, 0x00	; 0
 156:	eb e3       	ldi	r30, 0x3B	; 59
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	88 60       	ori	r24, 0x08	; 8
 15e:	8c 93       	st	X, r24
wait(100);
 160:	84 e6       	ldi	r24, 0x64	; 100
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 36 00 	call	0x6c	; 0x6c <wait>
}
 168:	cf 91       	pop	r28
 16a:	df 91       	pop	r29
 16c:	08 95       	ret

0000016e <Buzzer_OFF>:
void Buzzer_OFF()
{
 16e:	df 93       	push	r29
 170:	cf 93       	push	r28
 172:	cd b7       	in	r28, 0x3d	; 61
 174:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(PORTA,3);
 176:	ab e3       	ldi	r26, 0x3B	; 59
 178:	b0 e0       	ldi	r27, 0x00	; 0
 17a:	eb e3       	ldi	r30, 0x3B	; 59
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	87 7f       	andi	r24, 0xF7	; 247
 182:	8c 93       	st	X, r24
	wait(100);
 184:	84 e6       	ldi	r24, 0x64	; 100
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 36 00 	call	0x6c	; 0x6c <wait>
}
 18c:	cf 91       	pop	r28
 18e:	df 91       	pop	r29
 190:	08 95       	ret

00000192 <main>:

void main ()
{
 192:	df 93       	push	r29
 194:	cf 93       	push	r28
 196:	0f 92       	push	r0
 198:	cd b7       	in	r28, 0x3d	; 61
 19a:	de b7       	in	r29, 0x3e	; 62
	//Make pins output
	DDRA =0xff;
 19c:	ea e3       	ldi	r30, 0x3A	; 58
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	8f ef       	ldi	r24, 0xFF	; 255
 1a2:	80 83       	st	Z, r24


	while(1)
	{

		for(unsigned char i=0;i<3;i++)
 1a4:	19 82       	std	Y+1, r1	; 0x01
 1a6:	11 c0       	rjmp	.+34     	; 0x1ca <main+0x38>
		{
			LED_ON(i);
 1a8:	89 81       	ldd	r24, Y+1	; 0x01
 1aa:	88 2f       	mov	r24, r24
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 64 00 	call	0xc8	; 0xc8 <LED_ON>
			wait(100);
 1b2:	84 e6       	ldi	r24, 0x64	; 100
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 36 00 	call	0x6c	; 0x6c <wait>
			LED_OFF(i);
 1ba:	89 81       	ldd	r24, Y+1	; 0x01
 1bc:	88 2f       	mov	r24, r24
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 84 00 	call	0x108	; 0x108 <LED_OFF>


	while(1)
	{

		for(unsigned char i=0;i<3;i++)
 1c4:	89 81       	ldd	r24, Y+1	; 0x01
 1c6:	8f 5f       	subi	r24, 0xFF	; 255
 1c8:	89 83       	std	Y+1, r24	; 0x01
 1ca:	89 81       	ldd	r24, Y+1	; 0x01
 1cc:	83 30       	cpi	r24, 0x03	; 3
 1ce:	60 f3       	brcs	.-40     	; 0x1a8 <main+0x16>
		{
			LED_ON(i);
			wait(100);
			LED_OFF(i);
		}
		Buzzer_ON();
 1d0:	0e 94 a5 00 	call	0x14a	; 0x14a <Buzzer_ON>
		wait(100);
 1d4:	84 e6       	ldi	r24, 0x64	; 100
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 36 00 	call	0x6c	; 0x6c <wait>
		Buzzer_OFF();
 1dc:	0e 94 b7 00 	call	0x16e	; 0x16e <Buzzer_OFF>
 1e0:	e1 cf       	rjmp	.-62     	; 0x1a4 <main+0x12>

000001e2 <_exit>:
 1e2:	f8 94       	cli

000001e4 <__stop_program>:
 1e4:	ff cf       	rjmp	.-2      	; 0x1e4 <__stop_program>
