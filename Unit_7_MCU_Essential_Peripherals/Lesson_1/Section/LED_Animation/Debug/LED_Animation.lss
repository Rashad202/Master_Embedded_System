
LED_Animation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000168  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000240  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000026a  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 64 00 	call	0xc8	; 0xc8 <main>
  64:	0c 94 b2 00 	jmp	0x164	; 0x164 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <wait>:
#define DDRA    		    *((volatile unsigned char*)0x3A)
#define PORTA	        	*((volatile unsigned char*)0x3B)


void wait(int x)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <wait+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <wait+0x8>
  74:	00 d0       	rcall	.+0      	; 0x76 <wait+0xa>
  76:	cd b7       	in	r28, 0x3d	; 61
  78:	de b7       	in	r29, 0x3e	; 62
  7a:	9e 83       	std	Y+6, r25	; 0x06
  7c:	8d 83       	std	Y+5, r24	; 0x05
	unsigned int i,j;
	for(i=0;i<x;i++)
  7e:	1c 82       	std	Y+4, r1	; 0x04
  80:	1b 82       	std	Y+3, r1	; 0x03
  82:	12 c0       	rjmp	.+36     	; 0xa8 <wait+0x3c>
	for(j=0;j<255;j++);
  84:	1a 82       	std	Y+2, r1	; 0x02
  86:	19 82       	std	Y+1, r1	; 0x01
  88:	05 c0       	rjmp	.+10     	; 0x94 <wait+0x28>
  8a:	89 81       	ldd	r24, Y+1	; 0x01
  8c:	9a 81       	ldd	r25, Y+2	; 0x02
  8e:	01 96       	adiw	r24, 0x01	; 1
  90:	9a 83       	std	Y+2, r25	; 0x02
  92:	89 83       	std	Y+1, r24	; 0x01
  94:	89 81       	ldd	r24, Y+1	; 0x01
  96:	9a 81       	ldd	r25, Y+2	; 0x02
  98:	8f 3f       	cpi	r24, 0xFF	; 255
  9a:	91 05       	cpc	r25, r1
  9c:	b0 f3       	brcs	.-20     	; 0x8a <wait+0x1e>


void wait(int x)
{
	unsigned int i,j;
	for(i=0;i<x;i++)
  9e:	8b 81       	ldd	r24, Y+3	; 0x03
  a0:	9c 81       	ldd	r25, Y+4	; 0x04
  a2:	01 96       	adiw	r24, 0x01	; 1
  a4:	9c 83       	std	Y+4, r25	; 0x04
  a6:	8b 83       	std	Y+3, r24	; 0x03
  a8:	2d 81       	ldd	r18, Y+5	; 0x05
  aa:	3e 81       	ldd	r19, Y+6	; 0x06
  ac:	8b 81       	ldd	r24, Y+3	; 0x03
  ae:	9c 81       	ldd	r25, Y+4	; 0x04
  b0:	82 17       	cp	r24, r18
  b2:	93 07       	cpc	r25, r19
  b4:	38 f3       	brcs	.-50     	; 0x84 <wait+0x18>
	for(j=0;j<255;j++);

}
  b6:	26 96       	adiw	r28, 0x06	; 6
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	f8 94       	cli
  bc:	de bf       	out	0x3e, r29	; 62
  be:	0f be       	out	0x3f, r0	; 63
  c0:	cd bf       	out	0x3d, r28	; 61
  c2:	cf 91       	pop	r28
  c4:	df 91       	pop	r29
  c6:	08 95       	ret

000000c8 <main>:



void main ()
{
  c8:	df 93       	push	r29
  ca:	cf 93       	push	r28
  cc:	00 d0       	rcall	.+0      	; 0xce <main+0x6>
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
	//Make pins output
	DDRA =0xff;
  d2:	ea e3       	ldi	r30, 0x3A	; 58
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	8f ef       	ldi	r24, 0xFF	; 255
  d8:	80 83       	st	Z, r24
	while(1)
	{

		for(unsigned char i=0;i<8;i++)
  da:	1a 82       	std	Y+2, r1	; 0x02
  dc:	19 c0       	rjmp	.+50     	; 0x110 <main+0x48>
		{
			SET_BIT(PORTA,i);
  de:	ab e3       	ldi	r26, 0x3B	; 59
  e0:	b0 e0       	ldi	r27, 0x00	; 0
  e2:	eb e3       	ldi	r30, 0x3B	; 59
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	48 2f       	mov	r20, r24
  ea:	8a 81       	ldd	r24, Y+2	; 0x02
  ec:	28 2f       	mov	r18, r24
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <main+0x32>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	2a 95       	dec	r18
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <main+0x2e>
  fe:	84 2b       	or	r24, r20
 100:	8c 93       	st	X, r24
			wait(100);
 102:	84 e6       	ldi	r24, 0x64	; 100
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 36 00 	call	0x6c	; 0x6c <wait>
	//Make pins output
	DDRA =0xff;
	while(1)
	{

		for(unsigned char i=0;i<8;i++)
 10a:	8a 81       	ldd	r24, Y+2	; 0x02
 10c:	8f 5f       	subi	r24, 0xFF	; 255
 10e:	8a 83       	std	Y+2, r24	; 0x02
 110:	8a 81       	ldd	r24, Y+2	; 0x02
 112:	88 30       	cpi	r24, 0x08	; 8
 114:	20 f3       	brcs	.-56     	; 0xde <main+0x16>
		{
			SET_BIT(PORTA,i);
			wait(100);
		}
		wait(100);
 116:	84 e6       	ldi	r24, 0x64	; 100
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 36 00 	call	0x6c	; 0x6c <wait>
		for( signed char j=7; j>=0;--j)
 11e:	87 e0       	ldi	r24, 0x07	; 7
 120:	89 83       	std	Y+1, r24	; 0x01
 122:	1c c0       	rjmp	.+56     	; 0x15c <main+0x94>
		{
			CLR_BIT(PORTA,j);
 124:	ab e3       	ldi	r26, 0x3B	; 59
 126:	b0 e0       	ldi	r27, 0x00	; 0
 128:	eb e3       	ldi	r30, 0x3B	; 59
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	48 2f       	mov	r20, r24
 130:	89 81       	ldd	r24, Y+1	; 0x01
 132:	28 2f       	mov	r18, r24
 134:	33 27       	eor	r19, r19
 136:	27 fd       	sbrc	r18, 7
 138:	30 95       	com	r19
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	02 c0       	rjmp	.+4      	; 0x144 <main+0x7c>
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	2a 95       	dec	r18
 146:	e2 f7       	brpl	.-8      	; 0x140 <main+0x78>
 148:	80 95       	com	r24
 14a:	84 23       	and	r24, r20
 14c:	8c 93       	st	X, r24
			wait(100);
 14e:	84 e6       	ldi	r24, 0x64	; 100
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 36 00 	call	0x6c	; 0x6c <wait>
		{
			SET_BIT(PORTA,i);
			wait(100);
		}
		wait(100);
		for( signed char j=7; j>=0;--j)
 156:	89 81       	ldd	r24, Y+1	; 0x01
 158:	81 50       	subi	r24, 0x01	; 1
 15a:	89 83       	std	Y+1, r24	; 0x01
 15c:	89 81       	ldd	r24, Y+1	; 0x01
 15e:	88 23       	and	r24, r24
 160:	0c f7       	brge	.-62     	; 0x124 <main+0x5c>
 162:	bb cf       	rjmp	.-138    	; 0xda <main+0x12>

00000164 <_exit>:
 164:	f8 94       	cli

00000166 <__stop_program>:
 166:	ff cf       	rjmp	.-2      	; 0x166 <__stop_program>
