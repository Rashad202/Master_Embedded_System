
LED_ANIMATION_SW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000192  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000414  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000642  00000000  00000000  000005fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 64 00 	call	0xc8	; 0xc8 <main>
  64:	0c 94 c7 00 	jmp	0x18e	; 0x18e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <wait>:
#define PORTB	        	*((volatile unsigned char*)0x38)
#define PINB	        	*((volatile unsigned char*)0x36)


void wait(int x)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <wait+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <wait+0x8>
  74:	00 d0       	rcall	.+0      	; 0x76 <wait+0xa>
  76:	cd b7       	in	r28, 0x3d	; 61
  78:	de b7       	in	r29, 0x3e	; 62
  7a:	9e 83       	std	Y+6, r25	; 0x06
  7c:	8d 83       	std	Y+5, r24	; 0x05
	unsigned int i,j;
	for(i=0;i<x;i++)
  7e:	1c 82       	std	Y+4, r1	; 0x04
  80:	1b 82       	std	Y+3, r1	; 0x03
  82:	12 c0       	rjmp	.+36     	; 0xa8 <wait+0x3c>
	for(j=0;j<255;j++);
  84:	1a 82       	std	Y+2, r1	; 0x02
  86:	19 82       	std	Y+1, r1	; 0x01
  88:	05 c0       	rjmp	.+10     	; 0x94 <wait+0x28>
  8a:	89 81       	ldd	r24, Y+1	; 0x01
  8c:	9a 81       	ldd	r25, Y+2	; 0x02
  8e:	01 96       	adiw	r24, 0x01	; 1
  90:	9a 83       	std	Y+2, r25	; 0x02
  92:	89 83       	std	Y+1, r24	; 0x01
  94:	89 81       	ldd	r24, Y+1	; 0x01
  96:	9a 81       	ldd	r25, Y+2	; 0x02
  98:	8f 3f       	cpi	r24, 0xFF	; 255
  9a:	91 05       	cpc	r25, r1
  9c:	b0 f3       	brcs	.-20     	; 0x8a <wait+0x1e>


void wait(int x)
{
	unsigned int i,j;
	for(i=0;i<x;i++)
  9e:	8b 81       	ldd	r24, Y+3	; 0x03
  a0:	9c 81       	ldd	r25, Y+4	; 0x04
  a2:	01 96       	adiw	r24, 0x01	; 1
  a4:	9c 83       	std	Y+4, r25	; 0x04
  a6:	8b 83       	std	Y+3, r24	; 0x03
  a8:	2d 81       	ldd	r18, Y+5	; 0x05
  aa:	3e 81       	ldd	r19, Y+6	; 0x06
  ac:	8b 81       	ldd	r24, Y+3	; 0x03
  ae:	9c 81       	ldd	r25, Y+4	; 0x04
  b0:	82 17       	cp	r24, r18
  b2:	93 07       	cpc	r25, r19
  b4:	38 f3       	brcs	.-50     	; 0x84 <wait+0x18>
	for(j=0;j<255;j++);

}
  b6:	26 96       	adiw	r28, 0x06	; 6
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	f8 94       	cli
  bc:	de bf       	out	0x3e, r29	; 62
  be:	0f be       	out	0x3f, r0	; 63
  c0:	cd bf       	out	0x3d, r28	; 61
  c2:	cf 91       	pop	r28
  c4:	df 91       	pop	r29
  c6:	08 95       	ret

000000c8 <main>:



void main ()
{
  c8:	df 93       	push	r29
  ca:	cf 93       	push	r28
  cc:	00 d0       	rcall	.+0      	; 0xce <main+0x6>
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
	//Make pins output
	DDRA =0xff;
  d2:	ea e3       	ldi	r30, 0x3A	; 58
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	8f ef       	ldi	r24, 0xFF	; 255
  d8:	80 83       	st	Z, r24
	DDRB=0X00;
  da:	e7 e3       	ldi	r30, 0x37	; 55
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	10 82       	st	Z, r1
	while(1)
	{
		if(GET_BIT(PINB,0)==1)
  e0:	e6 e3       	ldi	r30, 0x36	; 54
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	88 2f       	mov	r24, r24
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	81 70       	andi	r24, 0x01	; 1
  ec:	90 70       	andi	r25, 0x00	; 0
  ee:	88 23       	and	r24, r24
  f0:	b9 f3       	breq	.-18     	; 0xe0 <main+0x18>
		{
			for(unsigned char i=0;i<8;i++)
  f2:	1a 82       	std	Y+2, r1	; 0x02
  f4:	19 c0       	rjmp	.+50     	; 0x128 <main+0x60>
					{
						SET_BIT(PORTA,i);
  f6:	ab e3       	ldi	r26, 0x3B	; 59
  f8:	b0 e0       	ldi	r27, 0x00	; 0
  fa:	eb e3       	ldi	r30, 0x3B	; 59
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	48 2f       	mov	r20, r24
 102:	8a 81       	ldd	r24, Y+2	; 0x02
 104:	28 2f       	mov	r18, r24
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <main+0x4a>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	2a 95       	dec	r18
 114:	e2 f7       	brpl	.-8      	; 0x10e <main+0x46>
 116:	84 2b       	or	r24, r20
 118:	8c 93       	st	X, r24
						wait(100);
 11a:	84 e6       	ldi	r24, 0x64	; 100
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 36 00 	call	0x6c	; 0x6c <wait>
	DDRB=0X00;
	while(1)
	{
		if(GET_BIT(PINB,0)==1)
		{
			for(unsigned char i=0;i<8;i++)
 122:	8a 81       	ldd	r24, Y+2	; 0x02
 124:	8f 5f       	subi	r24, 0xFF	; 255
 126:	8a 83       	std	Y+2, r24	; 0x02
 128:	8a 81       	ldd	r24, Y+2	; 0x02
 12a:	88 30       	cpi	r24, 0x08	; 8
 12c:	20 f3       	brcs	.-56     	; 0xf6 <main+0x2e>
					{
						SET_BIT(PORTA,i);
						wait(100);
					}
					wait(100);
 12e:	84 e6       	ldi	r24, 0x64	; 100
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 36 00 	call	0x6c	; 0x6c <wait>
					for( signed char j=7; j>=0;--j)
 136:	87 e0       	ldi	r24, 0x07	; 7
 138:	89 83       	std	Y+1, r24	; 0x01
 13a:	1c c0       	rjmp	.+56     	; 0x174 <main+0xac>
					{
						CLR_BIT(PORTA,j);
 13c:	ab e3       	ldi	r26, 0x3B	; 59
 13e:	b0 e0       	ldi	r27, 0x00	; 0
 140:	eb e3       	ldi	r30, 0x3B	; 59
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	48 2f       	mov	r20, r24
 148:	89 81       	ldd	r24, Y+1	; 0x01
 14a:	28 2f       	mov	r18, r24
 14c:	33 27       	eor	r19, r19
 14e:	27 fd       	sbrc	r18, 7
 150:	30 95       	com	r19
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 c0       	rjmp	.+4      	; 0x15c <main+0x94>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	2a 95       	dec	r18
 15e:	e2 f7       	brpl	.-8      	; 0x158 <main+0x90>
 160:	80 95       	com	r24
 162:	84 23       	and	r24, r20
 164:	8c 93       	st	X, r24
						wait(100);
 166:	84 e6       	ldi	r24, 0x64	; 100
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	0e 94 36 00 	call	0x6c	; 0x6c <wait>
					{
						SET_BIT(PORTA,i);
						wait(100);
					}
					wait(100);
					for( signed char j=7; j>=0;--j)
 16e:	89 81       	ldd	r24, Y+1	; 0x01
 170:	81 50       	subi	r24, 0x01	; 1
 172:	89 83       	std	Y+1, r24	; 0x01
 174:	89 81       	ldd	r24, Y+1	; 0x01
 176:	88 23       	and	r24, r24
 178:	0c f7       	brge	.-62     	; 0x13c <main+0x74>
					{
						CLR_BIT(PORTA,j);
						wait(100);
					}
					while((GET_BIT(PINB, 0) == 1));
 17a:	e6 e3       	ldi	r30, 0x36	; 54
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	88 2f       	mov	r24, r24
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	81 70       	andi	r24, 0x01	; 1
 186:	90 70       	andi	r25, 0x00	; 0
 188:	88 23       	and	r24, r24
 18a:	b9 f7       	brne	.-18     	; 0x17a <main+0xb2>
 18c:	a9 cf       	rjmp	.-174    	; 0xe0 <main+0x18>

0000018e <_exit>:
 18e:	f8 94       	cli

00000190 <__stop_program>:
 190:	ff cf       	rjmp	.-2      	; 0x190 <__stop_program>
